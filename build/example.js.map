{"version":3,"sources":["webpack:///webpack/bootstrap 33a04fe733806219fbb8","webpack:///./src/client/asset/AssetType.ts","webpack:///./src/shared/log.ts","webpack:///./src/client/asset/AbstractAsset.ts","webpack:///./src/shared/decorator.ts","webpack:///./src/shared/log/LogLevel.ts","webpack:///./src/client/asset.ts","webpack:///./src/client/asset/AssetLoader.ts","webpack:///./src/shared/helper.ts","webpack:///./src/shared/storage.ts","webpack:///./src/client/render/BasicRenderer.ts","webpack:///./src/shared/math/Helper.ts","webpack:///./src/shared/math/Dimension.ts","webpack:///./src/example/Example.ts","webpack:///./src/client/Client.ts","webpack:///./src/shared/decorator/logMethodCall.ts","webpack:///./src/shared/log/Log.ts","webpack:///./src/client/asset/Image.ts","webpack:///./src/shared/helper/Singleton.ts","webpack:///./src/shared/storage/RamStorage.ts","webpack:///./src/client/network.ts","webpack:///./src/client/network/Request.ts","webpack:///./src/client/asset/Sprite.ts","webpack:///./src/client/asset/Sound.ts","webpack:///./src/client/render.ts","webpack:///./src/client/render/CanvasRenderer.ts","webpack:///./src/client/environment.ts","webpack:///./src/client/environment/Viewport.ts","webpack:///./src/shared/math.ts","webpack:///./src/shared/math/Vector2D.ts"],"names":[],"mappings":"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","file":"./build/example.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 33a04fe733806219fbb8","/**\r\n * an enumeration of loadable assets via AssetLoader\r\n */\r\nexport enum AssetType {\r\n    Image,\r\n    Audio,\r\n    Json\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/AssetType.ts","export * from './log/LogLevel';\r\nexport * from './log/Log';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/log.ts","import { Asset } from 'client/asset/Asset';\r\nimport { AssetType } from 'client/asset/AssetType';\r\nimport { AssetLoader } from 'client/asset/AssetLoader';\r\n\r\n/**\r\n * a basic class for implementing the getter and setter function\r\n * of the required asset interface\r\n */\r\nexport abstract class AbstractAsset implements Asset {\r\n\r\n    /**\r\n     * holder of the asset loader\r\n     */\r\n    private static assetLoader = AssetLoader.getInstance<AssetLoader>();\r\n\r\n    constructor(\r\n        protected name?: string,\r\n        protected path?: string,\r\n        protected type?: AssetType,\r\n        protected data?: any\r\n    ) { }\r\n\r\n    /**\r\n     * get the asset loader instance to load the desired asset\r\n     */\r\n    protected static getAssetLoader(): AssetLoader {\r\n\r\n        return AbstractAsset.assetLoader;\r\n    }\r\n\r\n    public getName(): string {\r\n\r\n        return this.name;\r\n    }\r\n\r\n    public getPath(): string {\r\n\r\n        return this.path;\r\n    }\r\n\r\n    public getAssetType(): AssetType {\r\n\r\n        return this.type;\r\n    }\r\n\r\n    public getData(): any {\r\n\r\n        return this.data;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n\r\n        this.name = name;\r\n    }\r\n\r\n    public setPath(path: string): void {\r\n\r\n        this.path = path;\r\n    }\r\n\r\n    public setData(data: string): void {\r\n\r\n        this.data = data;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/AbstractAsset.ts","export * from './decorator/logMethodCall';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/decorator.ts","/**\r\n * a basic loglevel categorisation\r\n */\r\nexport enum LogLevel {\r\n    Debug, Info, Warning, Error\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/log/LogLevel.ts","export * from './asset/Image';\r\nexport * from './asset/Sprite';\r\nexport * from './asset/Sound';\r\nexport * from './asset/AssetType';\r\nexport * from './asset/AssetLoader';\r\nexport * from './asset/Asset';\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { Asset, InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\nimport { Singleton } from 'shared/helper';\r\nimport { RamStorage } from 'shared/storage';\r\nimport { Log } from 'shared/log';\r\nimport { Request } from 'client/network';\r\n\r\n/**\r\n * a class that can handle asset loading such as images and audio\r\n */\r\nexport class AssetLoader extends Singleton {\r\n\r\n    /**\r\n     * the holder of all unresolved asset loads\r\n     */\r\n    private unresolvedPromiseStack: Promise<AbstractAsset>[] = [];\r\n\r\n    /**\r\n     * register one or many assets to adress then later in the game\r\n     * an asset name should allways be unique, event if the asset type\r\n     * is different\r\n     *\r\n     * @param assetClass the class of the asset\r\n     * @param assets the asset to register\r\n     */\r\n    public registerAsset(assetClass: new () => AbstractAsset, ...assets: InlineAsset[]): void {\r\n\r\n        // iterate through all given assets\r\n        assets.forEach(asset => {\r\n\r\n            // check if the asset exists\r\n            if (RamStorage.has(this.getAssetStorageName(asset.name, asset.assetType))) {\r\n\r\n                // log a warning that an asset has a double register\r\n                Log.warning(\"The given asset with the name\", asset.name, \"is allready registered.\");\r\n            }\r\n\r\n            // add a promise to await its loading\r\n            this.unresolvedPromiseStack.push(new Promise<AbstractAsset>(resolve => {\r\n\r\n                // construct an instance of the asset\r\n                let instance = new assetClass();\r\n                instance.setName(asset.name);\r\n                instance.setPath(asset.path);\r\n\r\n                // fill the instance\r\n                this.loadAsset(instance).then(resource => {\r\n\r\n                    RamStorage.add(this.getAssetStorageName(asset.name, asset.assetType), resource);\r\n                    resolve(resource);\r\n                });\r\n            }));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * loads one asset\r\n     *\r\n     * @param instance the instance to be loaded\r\n     */\r\n    private async loadAsset(instance: Asset): Promise<Asset> {\r\n\r\n        let callback: (path: string) => Promise<any>;\r\n        switch (instance.getAssetType()) {\r\n\r\n            case AssetType.Image:\r\n\r\n                callback = this.loadImage.bind(this);\r\n                break;\r\n            default:\r\n\r\n                throw `Asset type ${instance.getAssetType()} is not implemented`;\r\n        }\r\n\r\n        // load the resource\r\n        let resource = await callback(instance.getPath());\r\n        instance.setData(resource);\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * get an asset from the storage\r\n     *\r\n     * @param name the name of the asset\r\n     */\r\n    public getAsset<T>(name: string, type: AssetType): T {\r\n\r\n        // ask the ram storage for the asset\r\n        return RamStorage.get<T>(this.getAssetStorageName(name, type));\r\n    }\r\n\r\n    /**\r\n     * get the amount of currently registered assets of the given type\r\n     *\r\n     * @param type the asset type\r\n     */\r\n    public getAssetAmount(type: AssetType): number {\r\n\r\n        return RamStorage.amount(this.getAssetStorageName('', type));\r\n    }\r\n\r\n    /**\r\n     * get all unresolved assets from the register process\r\n     */\r\n    public getUnresolvedPromised(): Promise<AbstractAsset>[] {\r\n\r\n        return this.unresolvedPromiseStack;\r\n    }\r\n\r\n    /**\r\n     * get the storage asset name\r\n     *\r\n     * @param name the name of the asset\r\n     */\r\n    private getAssetStorageName(name: string, type: AssetType): string {\r\n\r\n        let path = `assetloader.${type}`;\r\n        if (name) path += `.${name}`;\r\n\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * load an image\r\n     *\r\n     * @param path the path to the image\r\n     */\r\n    private async loadImage(path: string): Promise<any> {\r\n\r\n        // make an xhr call to the file\r\n        return Request.getBinary(path);\r\n    }\r\n\r\n    /**\r\n     * load an audio file\r\n     *\r\n     * @param path the path to the audio file\r\n     */\r\n    private async loadAudio(path: string): Promise<any> {\r\n\r\n    }\r\n\r\n    /**\r\n     * load a json file and parse its body\r\n     *\r\n     * @param path the path to the json file\r\n     */\r\n    private async loadJSON(path: string): Promise<any> {\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * creates an html element at the dom to load assets\r\n     *\r\n     * @param tagName the tagname of the new element\r\n     */\r\n    private createDomElement(tagName: string): HTMLElement {\r\n\r\n        // return the created element\r\n        return document.createElement(tagName);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/AssetLoader.ts","export * from './helper/Singleton';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helper.ts","export * from './storage/RamStorage';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/storage.ts","import { OptionalRendering } from 'shared/entity';\r\nimport { Singleton } from 'shared/helper';\r\nimport { Image } from 'client/asset';\r\n\r\n/**\r\n * the basic renderer class that all renderers should extend\r\n */\r\nexport abstract class BasicRenderer extends Singleton {\r\n\r\n    private entities: OptionalRendering[] = [];\r\n\r\n    /**\r\n     * get all renderable entities\r\n     */\r\n    protected getRenderableEntities(): OptionalRendering[] {\r\n\r\n        let renderableEntities: OptionalRendering[] = [];\r\n        this.entities.forEach(entity => {\r\n\r\n            if (entity.isVisible()) renderableEntities.push(entity);\r\n        });\r\n\r\n        // just return the currently visible entities\r\n        return renderableEntities;\r\n    }\r\n\r\n    /**\r\n     * add an entity to the current game scene\r\n     */\r\n    public addEntity(entity: OptionalRendering): void {\r\n\r\n        this.entities.push(entity);\r\n    }\r\n\r\n    /**\r\n     * a function that allowes the transform an image asset to a renderable context\r\n     * object.\r\n    */\r\n    public abstract imageToRenderObject(image: Image): any;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/render/BasicRenderer.ts","/**\r\n * simple math helper class\r\n */\r\nexport class Helper {\r\n\r\n    /**\r\n     * calculates a random degree\r\n     */\r\n    public static randomDegree(): number {\r\n\r\n        return Math.floor(Math.random() * 359) + 1;\r\n    }\r\n\r\n    /**\r\n     * transforms a degree number to radian number\r\n     *\r\n     * @param degree the given degree\r\n     */\r\n    public static degreeToRadian(degree: number): number {\r\n\r\n        return degree * Math.PI / 180;\r\n    }\r\n\r\n    /**\r\n     * transforms a radian number to degree\r\n     *\r\n     * @param radian the radian value\r\n     */\r\n    public static radianToDegree(radian: number): number {\r\n\r\n        return radian * (180 / Math.PI);\r\n    }\r\n\r\n    /**\r\n     * rounds to a given precision\r\n     *\r\n     * @param number the number to round\r\n     * @param precision the precision\r\n     */\r\n    public static roundToPrecision(number: number, precision: number = 2): number {\r\n\r\n        return +number.toFixed(precision);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math/Helper.ts","/**\r\n * a basic holder of x and y values as one datatype\r\n */\r\nexport class Dimension {\r\n\r\n    /**\r\n     *\r\n     * @param x the x coordinate\r\n     * @param y the y coordinate\r\n     */\r\n    constructor(\r\n        public x: number = 0,\r\n        public y: number = 0\r\n    ) {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math/Dimension.ts","import { Client } from 'client/Client';\r\nimport { CanvasRenderer } from 'client/render';\r\nimport { Viewport } from 'client/environment';\r\n\r\nimport { Image, Sprite, AssetLoader } from 'client/asset';\r\nimport { logMethodCall } from 'shared/decorator';\r\n\r\nclass MyAwesomeGame extends Client {\r\n\r\n    constructor() {\r\n\r\n        super({\r\n            gameDimension: Viewport.getWindowDimension(),\r\n            rederer: CanvasRenderer\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * preload function that allows to load sprites and do some heavy\r\n     * stuff before the game actually starts\r\n     */\r\n    public preload(): void {\r\n\r\n        Image.register({\r\n            name: 'SuperDuperImage',\r\n            path: 'asset/image/test.png'\r\n        });\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * a function that is called if the preload phase is completed\r\n     * you now have access to the registered assets\r\n     */\r\n    @logMethodCall\r\n    public loaded(): void {\r\n\r\n        // add the player to the game\r\n    }\r\n\r\n    /**\r\n     * update function handles the interaction with the player eg. the keybord\r\n     * input and changing the players direction or speed.\r\n     * this method is called during game loop BEFORE rendering!\r\n     *\r\n     * @warning dont do heavy stuff in here because this meight cause performance issues\r\n     */\r\n    public update(): void {\r\n\r\n        console.log(\"update\");\r\n    }\r\n}\r\n\r\n// start the game\r\nnew MyAwesomeGame();\n\n\n// WEBPACK FOOTER //\n// ./src/example/Example.ts","import { ClientConfig } from './ClientConfig';\r\nimport { logMethodCall } from 'shared/decorator';\r\nimport { Log } from 'shared/log';\r\n\r\nimport { AssetLoader, AssetType } from 'client/asset';\r\nimport { Renderer } from 'client/render';\r\n\r\n/**\r\n * the initiation class of the game client\r\n */\r\nexport abstract class Client {\r\n\r\n    /**\r\n     * holder of the preload promises\r\n     */\r\n    private preloadPromiseStack: Array<Promise<any>> = [];\r\n\r\n    /**\r\n     * the renderer instance\r\n     */\r\n    private renderer: Renderer;\r\n\r\n    constructor(\r\n        private clientConfig: ClientConfig\r\n    ) {\r\n\r\n        // step by step setup of the game\r\n        this.bindLoadEvent();\r\n    }\r\n\r\n    /**\r\n     * bind window events to let the start of the engine pause\r\n     * until the javascript dom is ready\r\n     */\r\n    @logMethodCall\r\n    private bindLoadEvent(): void {\r\n\r\n        // at window load, start the internal setup\r\n        window.addEventListener('load', this.internalSetup.bind(this));\r\n    }\r\n\r\n    /**\r\n     * internal setup phase\r\n     */\r\n    @logMethodCall\r\n    private internalSetup(): void {\r\n\r\n        // setup renderer\r\n        this.renderer = new this.clientConfig.rederer();\r\n        this.renderer.setup(this.clientConfig.gameDimension);\r\n\r\n        // start the preload phase\r\n        this.preload();\r\n\r\n        // get all promised from the preload phase and await them\r\n        let assetLoader = AssetLoader.getInstance<AssetLoader>();\r\n        Promise.all(assetLoader.getUnresolvedPromised()).then(() => {\r\n\r\n            // log the information about the registration process of assets\r\n            Log.info(\"Registered\", assetLoader.getAssetAmount(AssetType.Image), \"Images\");\r\n            Log.info(\"Registered\", assetLoader.getAssetAmount(AssetType.Audio), \"Sounds\");\r\n            Log.info(\"Registered\", assetLoader.getAssetAmount(AssetType.Json), \"JSON Objects\");\r\n\r\n            // all assets loaded, continue startup\r\n            this.loaded();\r\n\r\n            // init the game loop\r\n            this.gameLoop();\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * the game loop where all things come together\r\n     */\r\n    private gameLoop(): void {\r\n\r\n        // call update method\r\n        this.update();\r\n\r\n        // render the game\r\n        if (typeof this.renderer.preRender === 'function') this.renderer.preRender();\r\n        this.renderer.render();\r\n        if (typeof this.renderer.postRender === 'function') this.renderer.postRender();\r\n\r\n        // request the next game frame\r\n        window.requestAnimationFrame(this.gameLoop.bind(this));\r\n    }\r\n\r\n    /**\r\n     * preload function that allows to load sprites and do some heavy\r\n     * stuff before the game actually starts\r\n     */\r\n    public abstract preload(): void;\r\n\r\n    /**\r\n     * a function that is called if the preload phase is completed\r\n     * you now have access to the registered assets\r\n     */\r\n    public abstract loaded(): void;\r\n\r\n    /**\r\n     * update function handles the interaction with the player eg. the keybord\r\n     * input and changing the players direction or speed.\r\n     * this method is called during game loop BEFORE rendering!\r\n     *\r\n     * @warning dont do heavy stuff in here because this meight cause performance issues\r\n     */\r\n    public abstract update(): void;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/Client.ts","import { Log } from 'shared/log';\r\n\r\n/**\r\n * a decorator for logging method calls to debug console\r\n *\r\n * @param target\r\n * @param propertyKey\r\n * @param descriptor\r\n */\r\nexport function logMethodCall(\r\n    target: Object, key: string | symbol, descriptor: TypedPropertyDescriptor<Function>\r\n) {\r\n\r\n    return {\r\n        value: function (...args: any[]) {\r\n\r\n            // log the call\r\n            Log.debug(\"@logMethodCall\", `${target.constructor.name}:${key}()`);\r\n\r\n            // original method call\r\n            return descriptor.value.apply(this, args);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/decorator/logMethodCall.ts","import { LogLevel } from './LogLevel';\r\n\r\n/**\r\n * a log wrapper to allow log levels and a more complex\r\n * logging structure\r\n */\r\nexport class Log {\r\n\r\n    // the current loglevel\r\n    private static logLevel: LogLevel = LogLevel.Debug;\r\n\r\n    /**\r\n     * sets the log level for the application environment\r\n     *\r\n     * @param level the new log level\r\n     */\r\n    public static setLogLevel(level: LogLevel): void {\r\n\r\n        Log.logLevel = level;\r\n    }\r\n\r\n    /**\r\n     * logs the given data\r\n     *\r\n     * @param level the level to log in\r\n     * @param params all params as vararg array\r\n     */\r\n    public static log(level: LogLevel, ...params: any[]): void {\r\n\r\n        // log if the log level is ok\r\n        if (parseInt(<any>level) >= parseInt(<any>Log.logLevel)) {\r\n\r\n            // level ok, log\r\n            Log.getLogFunctionByLevel(level)(\r\n                `[Log.${LogLevel[level]}]`, ...params\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * gets a callback function to log\r\n     *\r\n     * @param level the level to get the function from\r\n     */\r\n    private static getLogFunctionByLevel(level: LogLevel): Function {\r\n\r\n        let callback = () => { };\r\n\r\n        // go through the different log levels\r\n        switch (level) {\r\n\r\n            case LogLevel.Debug: callback = console.debug; break;\r\n            case LogLevel.Info: callback = console.info; break;\r\n            case LogLevel.Warning: callback = console.warn; break;\r\n            case LogLevel.Error: callback = console.error; break;\r\n        }\r\n\r\n        return callback;\r\n    }\r\n\r\n    /**\r\n     * logs as debug level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static debug(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Debug, ...params);\r\n    }\r\n\r\n    /**\r\n     * logs as info level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static info(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Info, ...params);\r\n    }\r\n\r\n    /**\r\n     * logs as warning level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static warning(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Warning, ...params);\r\n    }\r\n\r\n    /**\r\n     * logs as error level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static error(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Error, ...params);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/log/Log.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\n\r\n/**\r\n * the image class handles exactly one image\r\n */\r\nexport class Image extends AbstractAsset {\r\n\r\n    constructor(\r\n        name?: string,\r\n        path?: string,\r\n        data?: string\r\n    ) {\r\n\r\n        super(name, path, AssetType.Image, data);\r\n    }\r\n\r\n    /**\r\n     * register an image asset\r\n     *\r\n     * @param name the unique name of the image\r\n     * @param path the path to the image\r\n     */\r\n    public static register(...images: InlineAsset[]): void {\r\n\r\n        // add the asset type\r\n        images.forEach(image => image.assetType = AssetType.Image);\r\n\r\n        // resiger all given images\r\n        Image.getAssetLoader().registerAsset(Image, ...images);\r\n    }\r\n\r\n    /**\r\n     * get the current image as bitmap image to draw this on the renderer\r\n     */\r\n    public async getData(): Promise<HTMLImageElement> {\r\n\r\n        return new Promise<HTMLImageElement>(resolve => {\r\n\r\n            let img = document.createElement('img');\r\n            img.src = super.getData();\r\n\r\n            resolve(img);\r\n        });\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/Image.ts","import { RamStorage } from 'shared/storage';\r\n\r\n/**\r\n * a class to handle the singleton paradigmen\r\n */\r\nexport abstract class Singleton {\r\n\r\n    // the instance storage\r\n    private static _instance: any;\r\n\r\n    /**\r\n     * generates a storage name for the instance storing\r\n     *\r\n     * @param className the class name\r\n     */\r\n    private static generateStorageName(): string {\r\n\r\n        return `singleton.instance.${this.name}`;\r\n    }\r\n\r\n    /**\r\n     * get the singleton instance\r\n     */\r\n    public static getInstance<T>(): T {\r\n\r\n        let instance = null;\r\n        if (!RamStorage.has(this.generateStorageName())) {\r\n\r\n            // get the constructor and store an instance of the class at the ram storage\r\n            let constructor = <{ new (): T }><any>this;\r\n            RamStorage.add(this.generateStorageName(), new constructor());\r\n        }\r\n\r\n        // get the instance\r\n        return RamStorage.get<T>(this.generateStorageName());\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helper/Singleton.ts","/**\r\n * holds objects in the ram of the operating unit\r\n */\r\nexport class RamStorage {\r\n\r\n    // the private cache object\r\n    private static cache: {\r\n        [path: string]: any\r\n    } = {};\r\n\r\n    /**\r\n     * adds an elemement to the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     * @param elemement the element to store\r\n     */\r\n    public static add(path: string, elemement: any): void {\r\n\r\n        RamStorage.cache[path] = elemement;\r\n    }\r\n\r\n    /**\r\n     * removes an element from the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static remove(path: string): void {\r\n\r\n        delete RamStorage.cache[path];\r\n    }\r\n\r\n    /**\r\n     * get an element from the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static get<T>(path: string): T {\r\n\r\n        return <T>RamStorage.cache[path];\r\n    }\r\n\r\n    /**\r\n     * checks if an object exists in the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static has(path: string): boolean {\r\n\r\n        return RamStorage.get(path) !== undefined;\r\n    }\r\n\r\n    /**\r\n     * the path to one or many objects in the storage\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static amount(path: string): number {\r\n\r\n        let counter = 0;\r\n        Object.keys(RamStorage.cache).forEach(key => {\r\n\r\n            // if the path is present, update counter\r\n            if (key.indexOf(path) === 0) counter++;\r\n        });\r\n\r\n        return counter;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/storage/RamStorage.ts","export * from './network/Request';\n\n\n// WEBPACK FOOTER //\n// ./src/client/network.ts","export class Request {\r\n\r\n    /**\r\n     * make an asynchronus get request to the given url\r\n     * and returns a blob instance\r\n     *\r\n     * @param path the url\r\n     */\r\n    public static async getBinary(path: string): Promise<Blob> {\r\n\r\n        return new Promise<Blob>(resolve => {\r\n\r\n            // create xhr instance and set properties\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.responseType = 'blob';\r\n            xhr.open('GET', path);\r\n\r\n            // register finish event\r\n            xhr.onload = () => {\r\n\r\n                // create the blob reader\r\n                let reader = new FileReader();\r\n                reader.onloadend = () => {\r\n\r\n                    resolve(<Blob>reader.result);\r\n                }\r\n                reader.readAsDataURL(xhr.response);\r\n            };\r\n\r\n            // send the request\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/network/Request.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\n\r\n/**\r\n * the sprite class is able to handle multiple images build into\r\n * one big sprite graphic file\r\n */\r\nexport class Sprite extends AbstractAsset {\r\n\r\n    constructor(\r\n        name?: string,\r\n        path?: string,\r\n        data?: string\r\n    ) {\r\n\r\n        super(name, path, AssetType.Image, data);\r\n    }\r\n\r\n    /**\r\n     * register an image asset\r\n     *\r\n     * @param name the unique name of the image\r\n     * @param path the path to the image\r\n     */\r\n    public static register(...sprites: InlineAsset[]): void {\r\n\r\n        // add the asset type\r\n        sprites.forEach(sprite => sprite.assetType = AssetType.Image);\r\n\r\n        // resiger all given images\r\n        Sprite.getAssetLoader().registerAsset(Sprite, ...sprites);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/Sprite.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\n\r\nexport class Sound extends AbstractAsset {\r\n\r\n    constructor(\r\n        name?: string,\r\n        path?: string,\r\n        data?: string\r\n    ) {\r\n\r\n        super(name, path, AssetType.Audio, data);\r\n    }\r\n\r\n    /**\r\n     * register an image asset\r\n     *\r\n     * @param name the unique name of the image\r\n     * @param path the path to the image\r\n     */\r\n    public static register(...sounds: InlineAsset[]): void {\r\n\r\n        // add the asset type\r\n        sounds.forEach(sound => sound.assetType = AssetType.Audio);\r\n\r\n        // resiger all given sounds\r\n        Sound.getAssetLoader().registerAsset(Sound, ...sounds);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/Sound.ts","export * from './render/Renderer';\r\nexport * from './render/CanvasRenderer';\r\nexport * from './render/BasicRenderer';\n\n\n// WEBPACK FOOTER //\n// ./src/client/render.ts","import { Renderer } from 'client/render/Renderer';\r\nimport { Dimension } from 'shared/math';\r\nimport { Log } from 'shared/log';\r\nimport { OptionalRendering } from 'shared/entity';\r\nimport { Image } from 'client/asset':\r\nimport { BasicRenderer } from 'client/render/BasicRenderer';\r\n\r\n/**\r\n * a game renderer based on the html canvas element\r\n */\r\nexport class CanvasRenderer extends BasicRenderer implements Renderer {\r\n\r\n    /**\r\n     * the holder of the canvas element\r\n     */\r\n    private canvas: HTMLCanvasElement;\r\n\r\n    /**\r\n     * the 2d rendering context of the game canvas\r\n     */\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    /**\r\n     * the game height and width holder\r\n     */\r\n    private gameDimension: Dimension;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // some logging\r\n        Log.info(\"Using\", this, \"as Renderer\");\r\n    }\r\n\r\n    /**\r\n     * set up the game environment to a given dimension\r\n     */\r\n    public setup(gameDimension: Dimension): void {\r\n\r\n        // save the dimension and create the canvas\r\n        this.gameDimension = gameDimension;\r\n        this.createCanvas();\r\n\r\n        // get the 2d context\r\n        this.ctx = this.canvas.getContext('2d');\r\n    }\r\n\r\n    /**\r\n     * creates the canvas element and append it to the given parentNode\r\n     */\r\n    private createCanvas(): void {\r\n\r\n        // create the canvas\r\n        this.canvas = document.createElement('canvas');\r\n        document.body.appendChild(this.canvas);\r\n\r\n        // apply the game dimension\r\n        this.canvas.setAttribute('width', `${this.gameDimension.x}px`);\r\n        this.canvas.setAttribute('height', `${this.gameDimension.y}px`);\r\n        this.canvas.setAttribute('style', 'display:block;position:absolute;');\r\n    }\r\n\r\n    /**\r\n     * the method where all the magic takes place. called in gameloop\r\n     * to render all entities and other stuff\r\n     */\r\n    public async render(): Promise<void> {\r\n\r\n        // get all entities that shoule be visible by the client\r\n        // @todo: only render entitites that are visible by the camera\r\n        let visibleEntities = this.getRenderableEntities();\r\n\r\n        // render the entity at its center point\r\n        visibleEntities.forEach(entity => {\r\n\r\n            // get the image asset that should be rendered\r\n            let image = entity.getImage();\r\n\r\n            // draw the entity\r\n            let img = image.getData().then(r => {\r\n                this.ctx.drawImage(\r\n                    r,\r\n                    entity.getPosition().x,\r\n                    entity.getPosition().y\r\n                )\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * a function that allowes the transform an image asset to a renderable context\r\n     * object.\r\n    */\r\n    public imageToRenderObject(image: Image): ImageBitmap {\r\n\r\n        let canvas = <HTMLCanvasElement>document.createElement('camvas');\r\n        canvas.dr\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/render/CanvasRenderer.ts","export * from './environment/Viewport';\n\n\n// WEBPACK FOOTER //\n// ./src/client/environment.ts","import { Dimension } from 'shared/math';\r\n\r\n/**\r\n * a class to handle the window viewport things like\r\n * getting the player's screen width and height\r\n */\r\nexport class Viewport {\r\n\r\n    /**\r\n     * getting the current window dimension\r\n     */\r\n    public static getWindowDimension(): Dimension {\r\n\r\n        return new Dimension(\r\n            window.innerWidth,\r\n            window.innerHeight\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/environment/Viewport.ts","export * from './math/Helper';\r\nexport * from './math/Vector2D';\r\nexport * from './math/Dimension';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math.ts","import { Helper } from 'shared/math/Helper';\r\nimport { Dimension } from 'shared/math/Dimension';\r\n\r\n/**\r\n * represents a 2D vector with x and y coordinates.\r\n */\r\nexport class Vector2D extends Dimension {\r\n\r\n    /**\r\n     *\r\n     * @param x the x coordinate\r\n     * @param y the y coordinate\r\n     */\r\n    constructor(\r\n        x: number = 0,\r\n        y: number = 0\r\n    ) {\r\n        super(x, y);\r\n    }\r\n\r\n    /**\r\n     * adds another vector\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public add(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x + vector.x,\r\n            this.y + vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * substract another vector\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public substract(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x - vector.x,\r\n            this.y - vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * divide another vector\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public divide(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x / vector.x,\r\n            this.y / vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * multiply two vectors\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public multiply(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x * vector.x,\r\n            this.y * vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * rounds the vector to a given precision\r\n     */\r\n    public round(precision: number = 2): Vector2D {\r\n\r\n        return new Vector2D(\r\n            Helper.roundToPrecision(this.x, precision),\r\n            Helper.roundToPrecision(this.y, precision)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * calculates the distance of two vector points\r\n     *\r\n     * @param otherVector the other vector calculate to\r\n     * @return the distance in pixel\r\n     */\r\n    public distanceToVector(otherVector: Vector2D): number {\r\n\r\n        return Math.sqrt(\r\n            Math.pow((this.x - otherVector.x), 2)\r\n            +\r\n            Math.pow((this.y - otherVector.y), 2)\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math/Vector2D.ts"],"sourceRoot":""}