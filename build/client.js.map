{"version":3,"sources":["webpack:///webpack/bootstrap eb3abd8d23f0f528f75e","webpack:///./src/client/asset/AssetType.ts","webpack:///./src/shared/log.ts","webpack:///./src/client/asset/AbstractAsset.ts","webpack:///./src/shared/log/LogLevel.ts","webpack:///./src/shared/helper.ts","webpack:///./src/shared/storage.ts","webpack:///./src/shared/entity/Entity.ts","webpack:///./src/shared/math/Helper.ts","webpack:///./src/shared/math/Dimension.ts","webpack:///./src/client/scene/Scene.ts","webpack:///./src/client/asset/AssetLoader.ts","webpack:///./src/client/Client.ts","webpack:///./src/shared/decorator.ts","webpack:///./src/shared/decorator/logMethodCall.ts","webpack:///./src/shared/log/Log.ts","webpack:///./src/client/Game.ts","webpack:///./src/shared/helper/Singleton.ts","webpack:///./src/shared/storage/RamStorage.ts","webpack:///./src/shared/helper/Binary.ts","webpack:///./src/shared/entity.ts","webpack:///./src/shared/math.ts","webpack:///./src/shared/math/Vector2D.ts","webpack:///./src/shared/entity/CollidableEntity.ts","webpack:///./src/client/camera.ts","webpack:///./src/client/camera/Camera.ts","webpack:///./src/client/scene.ts","webpack:///./src/client/scene/LoadingScreenScene.ts","webpack:///./src/client/asset.ts","webpack:///./src/client/asset/Image.ts","webpack:///./src/client/network.ts","webpack:///./src/client/network/Request.ts","webpack:///./src/client/asset/Sprite.ts","webpack:///./src/client/asset/Sound.ts","webpack:///./src/shared/helper/File.ts","webpack:///./src/client/entity.ts","webpack:///./src/client/entity/Entity.ts","webpack:///./src/client/entity/CollidableEntity.ts"],"names":[],"mappings":"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","file":"./build/client.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap eb3abd8d23f0f528f75e","/**\r\n * an enumeration of loadable assets via AssetLoader\r\n */\r\nexport enum AssetType {\r\n    Image,\r\n    Audio,\r\n    Json\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/AssetType.ts","export * from './log/LogLevel';\r\nexport * from './log/Log';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/log.ts","import { Asset } from 'client/asset/Asset';\r\nimport { AssetType } from 'client/asset/AssetType';\r\nimport { AssetLoader } from 'client/asset/AssetLoader';\r\n\r\n/**\r\n * a basic class for implementing the getter and setter function\r\n * of the required asset interface\r\n */\r\nexport abstract class AbstractAsset implements Asset {\r\n\r\n    /**\r\n     * holder of the asset loader\r\n     */\r\n    private static assetLoader = AssetLoader.getInstance<AssetLoader>();\r\n\r\n    constructor(\r\n        protected name?: string,\r\n        protected path?: string,\r\n        protected type?: AssetType,\r\n        protected data?: any\r\n    ) { }\r\n\r\n    /**\r\n     * get the asset loader instance to load the desired asset\r\n     */\r\n    protected static getAssetLoader(): AssetLoader {\r\n\r\n        return AbstractAsset.assetLoader;\r\n    }\r\n\r\n    public getName(): string {\r\n\r\n        return this.name;\r\n    }\r\n\r\n    public getPath(): string {\r\n\r\n        return this.path;\r\n    }\r\n\r\n    public getAssetType(): AssetType {\r\n\r\n        return this.type;\r\n    }\r\n\r\n    public getData(): any {\r\n\r\n        return this.data;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n\r\n        this.name = name;\r\n    }\r\n\r\n    public setPath(path: string): void {\r\n\r\n        this.path = path;\r\n    }\r\n\r\n    public setData(data: string): void {\r\n\r\n        this.data = data;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/AbstractAsset.ts","/**\r\n * a basic loglevel categorisation\r\n */\r\nexport enum LogLevel {\r\n    Debug, Info, Warning, Error\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/log/LogLevel.ts","export * from './helper/Singleton';\r\nexport * from './helper/Binary';\r\nexport * from './helper/File';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helper.ts","export * from './storage/RamStorage';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/storage.ts","import { Vector2D } from 'shared/math';\r\n\r\n/**\r\n * the base class for all game entities\r\n */\r\nexport abstract class Entity {\r\n\r\n    constructor(\r\n        private position: Vector2D = new Vector2D(0, 0)\r\n    ) { }\r\n\r\n    /**\r\n     * get the current position of the entity (center point)\r\n     */\r\n    public getPosition(): Vector2D {\r\n\r\n        return this.position;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/entity/Entity.ts","/**\r\n * simple math helper class\r\n */\r\nexport class Helper {\r\n\r\n    /**\r\n     * calculates a random degree\r\n     */\r\n    public static randomDegree(): number {\r\n\r\n        return Math.floor(Math.random() * 359) + 1;\r\n    }\r\n\r\n    /**\r\n     * transforms a degree number to radian number\r\n     *\r\n     * @param degree the given degree\r\n     */\r\n    public static degreeToRadian(degree: number): number {\r\n\r\n        return degree * Math.PI / 180;\r\n    }\r\n\r\n    /**\r\n     * transforms a radian number to degree\r\n     *\r\n     * @param radian the radian value\r\n     */\r\n    public static radianToDegree(radian: number): number {\r\n\r\n        return radian * (180 / Math.PI);\r\n    }\r\n\r\n    /**\r\n     * rounds to a given precision\r\n     *\r\n     * @param number the number to round\r\n     * @param precision the precision\r\n     */\r\n    public static roundToPrecision(number: number, precision: number = 2): number {\r\n\r\n        return +number.toFixed(precision);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math/Helper.ts","/**\r\n * a basic holder of x and y values as one datatype\r\n */\r\nexport class Dimension {\r\n\r\n    /**\r\n     *\r\n     * @param x the x coordinate\r\n     * @param y the y coordinate\r\n     */\r\n    constructor(\r\n        public x: number = 0,\r\n        public y: number = 0\r\n    ) {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math/Dimension.ts","import { Game } from 'Game';\r\n\r\n/**\r\n * a basic scene\r\n */\r\nexport abstract class Scene {\r\n\r\n    /**\r\n     * creates the scene. the new scene starts only if the promise is resolved.\r\n     *\r\n     * @param game the current game holder instance\r\n     */\r\n    public abstract async create(game: Game): Promise<void>;\r\n\r\n    /**\r\n     * the update function called during game loop for the currently\r\n     * active scene\r\n     *\r\n     * @param game the current game holder instance\r\n     */\r\n    public abstract update(game: Game): void;\r\n\r\n    /**\r\n     * called if the scene changes. only if the promise is resolved, the\r\n     * new scene will start\r\n     *\r\n     * @param game the current game holder instance\r\n     */\r\n    public abstract async destroy(game: Game): Promise<void>;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/scene/Scene.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { Asset, InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\nimport { Singleton, Binary } from 'shared/helper';\r\nimport { RamStorage } from 'shared/storage';\r\nimport { Log } from 'shared/log';\r\nimport { Request } from 'client/network';\r\n\r\n/**\r\n * a class that can handle asset loading such as images and audio\r\n */\r\nexport class AssetLoader extends Singleton {\r\n\r\n    /**\r\n     * the holder of all asset loads\r\n     */\r\n    private assetLoaderPromiseStack: Promise<AbstractAsset>[] = [];\r\n\r\n    /**\r\n     * register one or many assets to adress then later in the game\r\n     * an asset name should allways be unique, event if the asset type\r\n     * is different\r\n     *\r\n     * @param assetClass the class of the asset\r\n     * @param assets the asset to register\r\n     */\r\n    public async registerAsset(assetClass: new () => AbstractAsset, ...assets: InlineAsset[]): Promise<AbstractAsset[]> {\r\n\r\n        let outerPromise: Promise<AbstractAsset>[] = [];\r\n        let resourceStack: AbstractAsset[] = [];\r\n\r\n        // iterate through all given assets\r\n        assets.forEach(asset => {\r\n\r\n            // check if the asset exists\r\n            if (RamStorage.has(this.getAssetStorageName(asset.name, asset.assetType))) {\r\n\r\n                // log a warning that an asset has a double register\r\n                Log.warning(\"The given asset with the name\", asset.name, \"is allready registered.\");\r\n            }\r\n\r\n            // add a promise to await its loading\r\n            outerPromise.push(new Promise<AbstractAsset>(resolve => {\r\n\r\n                // construct an instance of the asset\r\n                let instance = new assetClass();\r\n                instance.setName(asset.name);\r\n                instance.setPath(asset.path);\r\n\r\n                // fill the instance\r\n                this.loadAsset(instance).then(resource => {\r\n\r\n                    // store the asset\r\n                    RamStorage.add(this.getAssetStorageName(asset.name, asset.assetType), resource);\r\n                    resourceStack.push(resource);\r\n\r\n                    // resolve the promise\r\n                    resolve(resource);\r\n                });\r\n            }));\r\n        });\r\n\r\n        // stack all loading promises to the asset loading process\r\n        this.assetLoaderPromiseStack.push(...outerPromise);\r\n\r\n        // return the promise\r\n        return Promise.all(outerPromise).then(() => { return resourceStack; });\r\n    }\r\n\r\n    /**\r\n     * loads one asset\r\n     *\r\n     * @param instance the instance to be loaded\r\n     */\r\n    private async loadAsset(instance: Asset): Promise<Asset> {\r\n\r\n        let callback: (path: string) => Promise<any>;\r\n        switch (instance.getAssetType()) {\r\n\r\n            case AssetType.Image:\r\n\r\n                callback = this.loadImage.bind(this);\r\n                break;\r\n            default:\r\n\r\n                throw `Asset type ${instance.getAssetType()} is not implemented`;\r\n        }\r\n\r\n        // load the resource\r\n        return callback(instance.getPath()).then(resource => {\r\n\r\n            // set the resource data to the asset instance\r\n            instance.setData(resource);\r\n            return instance;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get an asset from the storage\r\n     *\r\n     * @param name the name of the asset\r\n     */\r\n    public getAsset<T>(name: string, type: AssetType): T {\r\n\r\n        // ask the ram storage for the asset\r\n        return RamStorage.get<T>(this.getAssetStorageName(name, type));\r\n    }\r\n\r\n    /**\r\n     * get the amount of currently registered assets of the given type\r\n     *\r\n     * @param type the asset type\r\n     */\r\n    public getAssetAmount(type: AssetType): number {\r\n\r\n        return RamStorage.amount(this.getAssetStorageName('', type));\r\n    }\r\n\r\n    /**\r\n     * get all unresolved assets from the register process\r\n     */\r\n    public getUnresolvedPromised(): Promise<AbstractAsset>[] {\r\n\r\n        return this.assetLoaderPromiseStack;\r\n    }\r\n\r\n    /**\r\n     * add promises to the asset loader. this can be used to delay the game\r\n     * startup until all assets are loaded.\r\n     *\r\n     * @param promises the promises to add\r\n     */\r\n    public addAssetLoaderPromise(...promises: Promise<any>[]): Promise<any>[] {\r\n\r\n        this.assetLoaderPromiseStack.push(...promises);\r\n        return promises;\r\n    }\r\n\r\n    /**\r\n     * get the storage asset name\r\n     *\r\n     * @param name the name of the asset\r\n     */\r\n    private getAssetStorageName(name: string, type: AssetType): string {\r\n\r\n        let path = `assetloader.${type}`;\r\n        if (name) path += `.${name}`;\r\n\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * load an image\r\n     *\r\n     * @param path the path to the image\r\n     */\r\n    private async loadImage(path: string): Promise<ImageBitmap> {\r\n\r\n        // if the path is a data uri, return this instantly\r\n        if (path.indexOf('data:image/') === 0) {\r\n\r\n            return new Promise<ImageBitmap>(resolve => {\r\n\r\n                resolve(createImageBitmap(Binary.dataUriToBlob(path)));\r\n            });\r\n        }\r\n\r\n        // make an xhr call to the file\r\n        return Request.getBinary(path).then((image) => {\r\n\r\n            // create the image bitmap for the blob\r\n            return createImageBitmap(Binary.dataUriToBlob(image));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * load an audio file\r\n     *\r\n     * @param path the path to the audio file\r\n     */\r\n    private async loadAudio(path: string): Promise<any> {\r\n\r\n    }\r\n\r\n    /**\r\n     * load a json file and parse its body\r\n     *\r\n     * @param path the path to the json file\r\n     */\r\n    private async loadJSON(path: string): Promise<any> {\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * creates an html element at the dom to load assets\r\n     *\r\n     * @param tagName the tagname of the new element\r\n     */\r\n    private createDomElement(tagName: string): HTMLElement {\r\n\r\n        // return the created element\r\n        return document.createElement(tagName);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/AssetLoader.ts","import { ClientConfig } from './ClientConfig';\r\nimport { logMethodCall } from 'shared/decorator';\r\nimport { Log } from 'shared/log';\r\nimport { Game } from 'client/Game';\r\n\r\nimport { AssetLoader, AssetType } from 'client/asset';\r\nimport { Renderer } from 'client/render';\r\n\r\n/**\r\n * the initiation class of the game client\r\n */\r\nexport abstract class Client {\r\n\r\n    /**\r\n     * the renderer instance\r\n     */\r\n    private renderer: Renderer;\r\n\r\n    /**\r\n     * the game instance\r\n     */\r\n    private gameInstance: Game;\r\n\r\n    constructor(\r\n        private clientConfig: ClientConfig\r\n    ) {\r\n\r\n        // print package and version info\r\n        console.info(\"%c -= Qhun-Engine v1.0.0 =- [ http://engine.qhun.de ]\", \"background: green; font-color: white;\");\r\n\r\n        // step by step setup of the game\r\n        this.bindLoadEvent();\r\n    }\r\n\r\n    /**\r\n     * bind window events to let the start of the engine pause\r\n     * until the javascript dom is ready\r\n     */\r\n    @logMethodCall\r\n    private bindLoadEvent(): void {\r\n\r\n        // at window load, start the internal setup\r\n        window.addEventListener('load', this.internalSetup.bind(this));\r\n    }\r\n\r\n    /**\r\n     * internal setup phase\r\n     */\r\n    @logMethodCall\r\n    private internalSetup(): void {\r\n\r\n        // get all promised from the preload phase and await them\r\n        let assetLoader = AssetLoader.getInstance<AssetLoader>();\r\n\r\n        // setup renderer\r\n        this.renderer = new this.clientConfig.rederer();\r\n        this.renderer.setup(this.clientConfig.gameDimension);\r\n\r\n        // start the preload phase\r\n        this.preload();\r\n\r\n        // await the asset loading\r\n        Promise.all(assetLoader.getUnresolvedPromised()).then(() => {\r\n\r\n            // log the information about the registration process of assets\r\n            Log.info(\"Registered\", assetLoader.getAssetAmount(AssetType.Image), \"Images\");\r\n            Log.info(\"Registered\", assetLoader.getAssetAmount(AssetType.Audio), \"Sounds\");\r\n            Log.info(\"Registered\", assetLoader.getAssetAmount(AssetType.Json), \"JSON Objects\");\r\n\r\n            // all assets loaded, continue startup\r\n            this.gameInstance = new Game(this.renderer);\r\n            this.loaded(this.gameInstance);\r\n\r\n            // init the game loop\r\n            this.gameLoop();\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * the game loop where all things come together\r\n     */\r\n    private gameLoop(): void {\r\n\r\n        // call update method\r\n        this.update();\r\n\r\n        // call the scene update\r\n        let scene = this.gameInstance.getCurrentScene();\r\n        if (scene) scene.update(this.gameInstance);\r\n\r\n        // render the game\r\n        if (typeof this.renderer.preRender === 'function') this.renderer.preRender();\r\n        this.renderer.render();\r\n        if (typeof this.renderer.postRender === 'function') this.renderer.postRender();\r\n\r\n        // request the next game frame\r\n        window.requestAnimationFrame(this.gameLoop.bind(this));\r\n    }\r\n\r\n    /**\r\n     * preload function that allows to load sprites and do some heavy\r\n     * stuff before the game actually starts\r\n     */\r\n    public abstract preload(): void;\r\n\r\n    /**\r\n     * a function that is called if the preload phase is completed\r\n     * you now have access to the registered assets\r\n     */\r\n    public abstract loaded(game: Game): void;\r\n\r\n    /**\r\n     * update function handles the interaction with the player eg. the keybord\r\n     * input and changing the players direction or speed.\r\n     * this method is called during game loop BEFORE rendering!\r\n     *\r\n     * @warning dont do heavy stuff in here because this meight cause performance issues\r\n     */\r\n    public abstract update(): void;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/Client.ts","export * from './decorator/logMethodCall';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/decorator.ts","import { Log } from 'shared/log';\r\n\r\n/**\r\n * a decorator for logging method calls to debug console\r\n *\r\n * @param target\r\n * @param propertyKey\r\n * @param descriptor\r\n */\r\nexport function logMethodCall(\r\n    target: Object, key: string | symbol, descriptor: TypedPropertyDescriptor<Function>\r\n) {\r\n\r\n    return {\r\n        value: function (...args: any[]) {\r\n\r\n            // log the call\r\n            Log.debug(\"@logMethodCall\", `${target.constructor.name}:${key}()`);\r\n\r\n            // original method call\r\n            return descriptor.value.apply(this, args);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/decorator/logMethodCall.ts","import { LogLevel } from './LogLevel';\r\n\r\n/**\r\n * a log wrapper to allow log levels and a more complex\r\n * logging structure\r\n */\r\nexport class Log {\r\n\r\n    // the current loglevel\r\n    private static logLevel: LogLevel = LogLevel.Debug;\r\n\r\n    /**\r\n     * sets the log level for the application environment\r\n     *\r\n     * @param level the new log level\r\n     */\r\n    public static setLogLevel(level: LogLevel): void {\r\n\r\n        Log.logLevel = level;\r\n    }\r\n\r\n    /**\r\n     * logs the given data\r\n     *\r\n     * @param level the level to log in\r\n     * @param params all params as vararg array\r\n     */\r\n    public static log(level: LogLevel, ...params: any[]): void {\r\n\r\n        // log if the log level is ok\r\n        if (parseInt(<any>level) >= parseInt(<any>Log.logLevel)) {\r\n\r\n            // level ok, log\r\n            Log.getLogFunctionByLevel(level)(\r\n                `[Log.${LogLevel[level]}]`, ...params\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * gets a callback function to log\r\n     *\r\n     * @param level the level to get the function from\r\n     */\r\n    private static getLogFunctionByLevel(level: LogLevel): Function {\r\n\r\n        let callback = () => { };\r\n\r\n        // go through the different log levels\r\n        switch (level) {\r\n\r\n            case LogLevel.Debug: callback = console.debug; break;\r\n            case LogLevel.Info: callback = console.info; break;\r\n            case LogLevel.Warning: callback = console.warn; break;\r\n            case LogLevel.Error: callback = console.error; break;\r\n        }\r\n\r\n        return callback;\r\n    }\r\n\r\n    /**\r\n     * logs as debug level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static debug(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Debug, ...params);\r\n    }\r\n\r\n    /**\r\n     * logs as info level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static info(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Info, ...params);\r\n    }\r\n\r\n    /**\r\n     * logs as warning level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static warning(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Warning, ...params);\r\n    }\r\n\r\n    /**\r\n     * logs as error level\r\n     *\r\n     * @param params all params as vararg array\r\n     */\r\n    public static error(...params: any[]): void {\r\n\r\n        Log.log(LogLevel.Error, ...params);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/log/Log.ts","import { Singleton } from 'shared/helper';\r\nimport { Renderer } from 'client/render';\r\nimport { Entity } from 'client/entity';\r\nimport { Camera } from 'client/camera';\r\nimport { Scene } from 'client/scene';\r\n\r\ndeclare type Thing = Entity | Camera | Scene;\r\n\r\n/**\r\n * a class that handles adding of entities, cameras, physics ...\r\n */\r\nexport class Game extends Singleton {\r\n\r\n    /**\r\n     * the holder of the currently visible scene\r\n     */\r\n    protected currentScene: Scene;\r\n\r\n    constructor(\r\n        private renderer: Renderer\r\n    ) {\r\n        super();\r\n\r\n        // bind singleton\r\n        Game.bindInstance(this);\r\n    }\r\n\r\n    /**\r\n     * add a thing to the game\r\n     *\r\n     * @param things the things to add\r\n     */\r\n    public add(...things: Thing[]): void {\r\n\r\n        // iterate through all things\r\n        things.forEach(thing => {\r\n\r\n            // check the type of the thing\r\n            if (thing instanceof Entity) {\r\n\r\n                this.addEntity(<Entity>thing);\r\n            } else if (thing instanceof Camera) {\r\n\r\n                this.addCamera(<Camera>thing);\r\n            } else if (thing instanceof Scene) {\r\n\r\n                this.addScene(<Scene>thing);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * add one entity to the game\r\n     *\r\n     * @param entity the entity to add\r\n     */\r\n    public addEntity(entity: Entity): void {\r\n\r\n        this.renderer.addEntity(entity);\r\n    }\r\n\r\n    /**\r\n     * add one camera to the game\r\n     *\r\n     * @param camera the camera to add\r\n     */\r\n    public addCamera(camera: Camera): void {\r\n\r\n        console.log(\"add camera\", camera);\r\n    }\r\n\r\n    /**\r\n     * add one scene to the game\r\n     *\r\n     * @param scene the scene to add\r\n     * @param autostart should the scene start?\r\n     */\r\n    public addScene(scene: Scene, autostart: boolean = false): void {\r\n\r\n        if (autostart) {\r\n\r\n            // load the scene\r\n            this.loadScene(scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the currently visible scene\r\n     */\r\n    public getCurrentScene(): Scene {\r\n\r\n        return this.currentScene;\r\n    }\r\n\r\n    /**\r\n     * load a new scene\r\n     *\r\n     * @param scene the scene to load\r\n     */\r\n    public async loadScene(scene: Scene): Promise<void> {\r\n\r\n        let promise = new Promise<void>(r => r());\r\n\r\n        // destruct the current scene\r\n        if (this.currentScene) {\r\n\r\n            promise = this.currentScene.destroy(this);\r\n        }\r\n\r\n        // await the destructing\r\n        return promise.then(() => {\r\n\r\n            // set the new scene\r\n            this.currentScene = scene;\r\n            this.currentScene.create(this);\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/Game.ts","import { RamStorage } from 'shared/storage';\r\n\r\n/**\r\n * a class to handle the singleton paradigmen\r\n */\r\nexport abstract class Singleton {\r\n    /**\r\n     * generates a storage name for the instance storing\r\n     *\r\n     * @param className the class name\r\n     */\r\n    private static generateStorageName(): string {\r\n\r\n        return `singleton.instance.${this.name}`;\r\n    }\r\n\r\n    /**\r\n     * get the singleton instance\r\n     */\r\n    public static getInstance<T>(): T {\r\n\r\n        let instance = null;\r\n        if (!RamStorage.has(this.generateStorageName())) {\r\n\r\n            // get the constructor and store an instance of the class at the ram storage\r\n            let constructor = <{ new (): T }><any>this;\r\n            RamStorage.add(this.generateStorageName(), new constructor());\r\n        }\r\n\r\n        // get the instance\r\n        return RamStorage.get<T>(this.generateStorageName());\r\n    }\r\n\r\n    /**\r\n     * bind the instance to the singleton storage\r\n     *\r\n     * @param instance the instance that should be bound\r\n     */\r\n    protected static bindInstance(instance: any): void {\r\n\r\n        // save the instance\r\n        RamStorage.add(this.generateStorageName(), instance);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helper/Singleton.ts","/**\r\n * holds objects in the ram of the operating unit\r\n */\r\nexport class RamStorage {\r\n\r\n    // the private cache object\r\n    private static cache: {\r\n        [path: string]: any\r\n    } = {};\r\n\r\n    /**\r\n     * adds an elemement to the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     * @param elemement the element to store\r\n     */\r\n    public static add(path: string, elemement: any): void {\r\n\r\n        RamStorage.cache[path] = elemement;\r\n    }\r\n\r\n    /**\r\n     * removes an element from the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static remove(path: string): void {\r\n\r\n        delete RamStorage.cache[path];\r\n    }\r\n\r\n    /**\r\n     * get an element from the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static get<T>(path: string): T {\r\n\r\n        return <T>RamStorage.cache[path];\r\n    }\r\n\r\n    /**\r\n     * checks if an object exists in the cache\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static has(path: string): boolean {\r\n\r\n        return RamStorage.get(path) !== undefined;\r\n    }\r\n\r\n    /**\r\n     * the path to one or many objects in the storage\r\n     *\r\n     * @param path the path to the object. dots can be used to structure\r\n     */\r\n    public static amount(path: string): number {\r\n\r\n        let counter = 0;\r\n        Object.keys(RamStorage.cache).forEach(key => {\r\n\r\n            // if the path is present, update counter\r\n            if (key.indexOf(path) === 0) counter++;\r\n        });\r\n\r\n        return counter;\r\n    }\r\n}\r\n\r\n(<any>window).storage = RamStorage;\n\n\n// WEBPACK FOOTER //\n// ./src/shared/storage/RamStorage.ts","/**\r\n * a helper class for binary content\r\n */\r\nexport class Binary {\r\n\r\n    /**\r\n     * converts a data uri to a blob\r\n     *\r\n     * @param dataUri the data uri from the object\r\n     */\r\n    public static dataUriToBlob(dataUri: string): Blob {\r\n\r\n        // @see https://stackoverflow.com/questions/12168909/blob-from-dataurl\r\n        // convert base64 to raw binary data held in a string\r\n        // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\r\n        let byteString = atob(dataUri.split(',')[1]);\r\n\r\n        // separate out the mime component\r\n        let mimeString = dataUri.split(',')[0].split(':')[1].split(';')[0]\r\n\r\n        // write the bytes of the string to an ArrayBuffer\r\n        let ab = new ArrayBuffer(byteString.length);\r\n\r\n        // create a view into the buffer\r\n        let ia = new Uint8Array(ab);\r\n\r\n        // set the bytes of the buffer to the correct values\r\n        for (let i = 0; i < byteString.length; i++) {\r\n            ia[i] = byteString.charCodeAt(i);\r\n        }\r\n\r\n        // write the ArrayBuffer to a blob, and you're done\r\n        let blob = new Blob([ab], { type: mimeString });\r\n        return blob;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helper/Binary.ts","export * from './entity/CanCollide';\r\nexport * from './entity/Entity';\r\nexport * from './entity/CollidableEntity';\r\nexport * from './entity/OptionalRendering';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/entity.ts","export * from './math/Helper';\r\nexport * from './math/Vector2D';\r\nexport * from './math/Dimension';\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math.ts","import { Helper } from 'shared/math/Helper';\r\nimport { Dimension } from 'shared/math/Dimension';\r\n\r\n/**\r\n * represents a 2D vector with x and y coordinates.\r\n */\r\nexport class Vector2D extends Dimension {\r\n\r\n    /**\r\n     *\r\n     * @param x the x coordinate\r\n     * @param y the y coordinate\r\n     */\r\n    constructor(\r\n        x: number = 0,\r\n        y: number = 0\r\n    ) {\r\n        super(x, y);\r\n    }\r\n\r\n    /**\r\n     * adds another vector\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public add(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x + vector.x,\r\n            this.y + vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * substract another vector\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public substract(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x - vector.x,\r\n            this.y - vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * divide another vector\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public divide(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x / vector.x,\r\n            this.y / vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * multiply two vectors\r\n     *\r\n     * @param vector the other vector\r\n     */\r\n    public multiply(vector: Vector2D): Vector2D {\r\n\r\n        return new Vector2D(\r\n            this.x * vector.x,\r\n            this.y * vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * rounds the vector to a given precision\r\n     */\r\n    public round(precision: number = 2): Vector2D {\r\n\r\n        return new Vector2D(\r\n            Helper.roundToPrecision(this.x, precision),\r\n            Helper.roundToPrecision(this.y, precision)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * calculates the distance of two vector points\r\n     *\r\n     * @param otherVector the other vector calculate to\r\n     * @return the distance in pixel\r\n     */\r\n    public distanceToVector(otherVector: Vector2D): number {\r\n\r\n        return Math.sqrt(\r\n            Math.pow((this.x - otherVector.x), 2)\r\n            +\r\n            Math.pow((this.y - otherVector.y), 2)\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/math/Vector2D.ts","import { Entity } from 'shared/entity/Entity';\r\nimport { CanCollide } from 'shared/entity/CanCollide';\r\nimport { CollisionType } from 'shared/collision';\r\nimport { Vector2D } from 'shared/math';\r\n\r\n/**\r\n * an entity that can collide with other collidable entities\r\n */\r\nexport abstract class CollidableEntity extends Entity implements CanCollide {\r\n\r\n    constructor(\r\n        private entityWidth: number,\r\n        private entityHeight: number,\r\n        position: Vector2D\r\n    ) {\r\n        super(position);\r\n    }\r\n\r\n    /**\r\n     * get the entities collision type\r\n     */\r\n    public abstract getCollisionType(): CollisionType;\r\n\r\n    /**\r\n     * an event handler that will fire if another entity collided with this instance\r\n     */\r\n    public abstract onCollision(otherEntity: CollidableEntity): void;\r\n\r\n    /**\r\n     * get the width of the entity\r\n     */\r\n    public getWidth(): number {\r\n\r\n        return this.entityWidth;\r\n    }\r\n\r\n    /**\r\n     * get the height of the entity\r\n     */\r\n    public getHeight(): number {\r\n\r\n        return this.entityHeight;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/entity/CollidableEntity.ts","export * from './camera/Camera';\n\n\n// WEBPACK FOOTER //\n// ./src/client/camera.ts","export class Camera { }\n\n\n// WEBPACK FOOTER //\n// ./src/client/camera/Camera.ts","export * from './scene/Scene';\r\nexport * from './scene/LoadingScreenScene';\n\n\n// WEBPACK FOOTER //\n// ./src/client/scene.ts","import { Scene } from 'client/scene/Scene';\r\nimport { Game } from 'Game';\r\n\r\n/**\r\n * a basic loading screen scene\r\n */\r\nexport class LoadingScreenScene extends Scene {\r\n\r\n    /**\r\n     * creates the scene. the new scene starts only if the promise is resolved.\r\n     *\r\n     * @param game the current game holder instance\r\n     */\r\n    public async create(game: Game): Promise<void> {\r\n\r\n        console.log(\"scene create\");\r\n    }\r\n\r\n    /**\r\n     * the update function called during game loop for the currently\r\n     * active scene\r\n     *\r\n     * @param game the current game holder instance\r\n     */\r\n    public update(game: Game): void {\r\n\r\n       // console.log(\"scene update\");\r\n    }\r\n\r\n    /**\r\n     * called if the scene changes. only if the promise is resolved, the\r\n     * new scene will start\r\n     *\r\n     * @param game the current game holder instance\r\n     */\r\n    public async destroy(game: Game): Promise<void> {\r\n\r\n        console.log(\"scene destroy\");\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/scene/LoadingScreenScene.ts","export * from './asset/Image';\r\nexport * from './asset/Sprite';\r\nexport * from './asset/Sound';\r\nexport * from './asset/AssetType';\r\nexport * from './asset/AssetLoader';\r\nexport * from './asset/Asset';\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\n\r\n/**\r\n * the image class handles exactly one image\r\n */\r\nexport class Image extends AbstractAsset {\r\n\r\n    constructor(\r\n        name?: string,\r\n        path?: string,\r\n        data?: string\r\n    ) {\r\n\r\n        super(name, path, AssetType.Image, data);\r\n    }\r\n\r\n    /**\r\n     * register an image asset\r\n     *\r\n     * @param name the unique name of the image\r\n     * @param path the path to the image\r\n     */\r\n    public static async register(...images: InlineAsset[]): Promise<any> {\r\n\r\n        // add the asset type\r\n        images.forEach(image => image.assetType = AssetType.Image);\r\n\r\n        // resiger all given images\r\n        return Image.getAssetLoader().registerAsset(Image, ...images);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/Image.ts","export * from './network/Request';\n\n\n// WEBPACK FOOTER //\n// ./src/client/network.ts","export class Request {\r\n\r\n    /**\r\n     * make an asynchronus get request to the given url\r\n     * and returns a blob instance\r\n     *\r\n     * @param path the url\r\n     */\r\n    public static async getBinary(path: string): Promise<string> {\r\n\r\n        return new Promise<string>(resolve => {\r\n\r\n            // create xhr instance and set properties\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.responseType = 'blob';\r\n            xhr.open('GET', path);\r\n\r\n            // register finish event\r\n            xhr.onload = () => {\r\n\r\n                // create the blob reader\r\n                let reader = new FileReader();\r\n                reader.onloadend = () => {\r\n\r\n                    resolve(reader.result);\r\n                }\r\n                reader.readAsDataURL(xhr.response);\r\n            };\r\n\r\n            // send the request\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * make an asynchronus get request to the given url\r\n     *\r\n     * @param path the url\r\n     */\r\n    public static async get(path: string): Promise<string> {\r\n\r\n        return new Promise<string>(resolve => {\r\n\r\n            // create xhr instance and set properties\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', path);\r\n\r\n            // register finish event\r\n            xhr.onload = () => {\r\n\r\n                resolve(xhr.response);\r\n            };\r\n\r\n            // send the request\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/network/Request.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { InlineAsset } from 'client/asset/Asset';\r\nimport { Image } from 'client/asset/Image';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\nimport { Request } from 'client/network';\r\nimport { File } from 'shared/helper';\r\n\r\nconst SPRITE_MAP_DELIMITER = ',';\r\n\r\n/**\r\n * an internal enum to index the correct array position for sprite maps\r\n */\r\nenum SpriteMapInformation {\r\n\r\n    Name, OffsetLeft, OffsetTop, Width, Height\r\n}\r\n\r\n/**\r\n * the sprite class is able to handle multiple images build into\r\n * one big sprite graphic file\r\n */\r\nexport class Sprite extends AbstractAsset {\r\n\r\n    constructor(\r\n        name?: string,\r\n        path?: string,\r\n        data?: string,\r\n        public map?: string\r\n    ) {\r\n\r\n        super(name, path, AssetType.Image, data);\r\n    }\r\n\r\n    /**\r\n     * register a sprite asset\r\n     *\r\n     * @param name the unique name of the image\r\n     * @param path the path to the image\r\n     */\r\n    public static async register(...sprites: InlineAsset[]): Promise<Sprite[]> {\r\n\r\n        // get the asset loader\r\n        let assetLoader = Sprite.getAssetLoader();\r\n        let mapLoaderPromise: Promise<any>[] = [];\r\n        let spriteMap: string[] = [];\r\n\r\n        // load sprite maps and add asset type to the inline asset\r\n        sprites.forEach(sprite => {\r\n\r\n            // set the asset type\r\n            sprite.assetType = AssetType.Image;\r\n\r\n            // get the sprite data file to split up the images\r\n            mapLoaderPromise.push(\r\n                Request.get(sprite.path + '.sprite')\r\n                    .then(map => spriteMap.push(map))\r\n            );\r\n        });\r\n\r\n        // if the maps are loaded, start the regist\r\n        // previously the current map loader promises should be added to\r\n        // the asset loadering promises to prevent game from beeing started to early\r\n        return Promise.all(assetLoader.addAssetLoaderPromise(new Promise<Sprite[]>(resolve => {\r\n\r\n            // now await the map loading\r\n            return Promise.all(mapLoaderPromise).then(() => {\r\n\r\n                // register the sprite as image\r\n                return assetLoader.registerAsset(Sprite, ...sprites).then(resources => {\r\n\r\n                    // cast the resources\r\n                    let sprites = <Sprite[]>resources;\r\n                    let spriteTransformPromise: Promise<any>[] = [];\r\n\r\n                    // add the sprite maps\r\n                    sprites.forEach((sprite, index) => {\r\n\r\n                        // add the map\r\n                        sprite.map = spriteMap[index];\r\n\r\n                        // register all sub images\r\n                        spriteTransformPromise.push(\r\n                            Sprite.registerSpriteSubImages(sprite)\r\n                        );\r\n                    });\r\n\r\n                    // await the sprite transform\r\n                    return Promise.all(spriteTransformPromise).then(() => {\r\n\r\n                        // return all generated image assets\r\n                        resolve(sprites);\r\n                    });\r\n                });\r\n            });\r\n        })));\r\n    }\r\n\r\n    /**\r\n     * extracts all sub images from a sprite image by its map\r\n     * and register them as single image\r\n     */\r\n    private static async registerSpriteSubImages(sprite: Sprite): Promise<Image[]> {\r\n\r\n        // split the map into lines and count them\r\n        let mapLines = sprite.map.split(String.fromCharCode(13));\r\n        let countImages = mapLines.length;\r\n        let itemRegisterPromiseStack: Promise<Image>[] = [];\r\n\r\n        // create a canvas element for the picture extraction\r\n        let canvas = document.createElement('canvas');\r\n        let ctx = canvas.getContext('2d');\r\n\r\n        // iterate through all sub images\r\n        for (let i = 0; i < countImages; i++) {\r\n\r\n            // get the information of image width and height\r\n            let info = mapLines[i].split(',');\r\n\r\n            // set the canvas height and width\r\n            canvas.width = parseInt(info[SpriteMapInformation.Width]);\r\n            canvas.height = parseInt(info[SpriteMapInformation.Height]);\r\n\r\n            // draw the image on the canvas\r\n            ctx.drawImage(\r\n                <ImageBitmap>sprite.getData(),\r\n                -parseInt(info[SpriteMapInformation.OffsetLeft]),\r\n                -parseInt(info[SpriteMapInformation.OffsetTop])\r\n            );\r\n\r\n            // get the image as data uri to register the new image\r\n            itemRegisterPromiseStack.push(Image.register({\r\n                name: `${sprite.name}[${info[SpriteMapInformation.Name].trim()}]`,\r\n                path: canvas.toDataURL()\r\n            }));\r\n        }\r\n\r\n        // await the registration process\r\n        return Promise.all(itemRegisterPromiseStack);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/Sprite.ts","import { AssetType } from 'client/asset/AssetType';\r\nimport { InlineAsset } from 'client/asset/Asset';\r\nimport { AbstractAsset } from 'client/asset/AbstractAsset';\r\n\r\nexport class Sound extends AbstractAsset {\r\n\r\n    constructor(\r\n        name?: string,\r\n        path?: string,\r\n        data?: string\r\n    ) {\r\n\r\n        super(name, path, AssetType.Audio, data);\r\n    }\r\n\r\n    /**\r\n     * register an image asset\r\n     *\r\n     * @param name the unique name of the image\r\n     * @param path the path to the image\r\n     */\r\n    public static register(...sounds: InlineAsset[]): void {\r\n\r\n        // add the asset type\r\n        sounds.forEach(sound => sound.assetType = AssetType.Audio);\r\n\r\n        // resiger all given sounds\r\n        Sound.getAssetLoader().registerAsset(Sound, ...sounds);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/asset/Sound.ts","/**\r\n * a helper class for file and path things\r\n */\r\nexport class File {\r\n\r\n    /**\r\n     * get the file extension of a path\r\n     *\r\n     * @param path the path to the file\r\n     */\r\n    public static getFileExtension(path: string) {\r\n\r\n        return path.split('').pop();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helper/File.ts","export * from './entity/Entity';\r\nexport * from './entity/RenderableEntity';\r\nexport * from './entity/CollidableEntity';\n\n\n// WEBPACK FOOTER //\n// ./src/client/entity.ts","import { Vector2D } from 'shared/math';\r\nimport { Entity as BaseEntity } from 'shared/entity';\r\nimport { RenderableEntity } from 'client/entity/RenderableEntity';\r\n\r\n/**\r\n * the base class for all game entities\r\n */\r\nexport abstract class Entity extends BaseEntity implements RenderableEntity {\r\n\r\n    /**\r\n     * the image that is rendered during game loop to display the entitiy\r\n     */\r\n    private currentTemplate: string;\r\n\r\n    /**\r\n     * the visibility flag\r\n     */\r\n    protected visible: boolean = true;\r\n\r\n    /**\r\n     * get the image asset that displays the current entity\r\n     */\r\n    public getImage(): string {\r\n\r\n        return this.currentTemplate;\r\n    }\r\n\r\n    /**\r\n     * set the new image for this entity\r\n     *\r\n     * @param image the current image that should represent this entity during rendering\r\n     */\r\n    public setImage(image: string): void {\r\n\r\n        this.currentTemplate = image;\r\n    }\r\n\r\n    /**\r\n     * is the entity visible? if not, the renderer will not render this entity\r\n     */\r\n    public isVisible(): boolean {\r\n\r\n        return this.visible;\r\n    }\r\n\r\n    /**\r\n     * sets the visibility of the entity\r\n     */\r\n    public setVisible(visible: boolean): void {\r\n\r\n        this.visible = visible;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/entity/Entity.ts","import { Entity } from 'client/entity/Entity';\r\nimport { CanCollide, CollidableEntity as SharedCollidableEntity } from 'shared/entity';\r\nimport { Vector2D } from 'shared/math';\r\nimport { CollisionType } from 'shared/collision';\r\n\r\n/**\r\n * the client class for a collidable entity\r\n */\r\nexport abstract class CollidableEntity extends Entity implements CanCollide {\r\n\r\n    constructor(\r\n        private entityWidth: number,\r\n        private entityHeight: number,\r\n        position: Vector2D\r\n    ) {\r\n        super(position);\r\n    }\r\n\r\n    /**\r\n     * get the entities collision type\r\n     */\r\n    public abstract getCollisionType(): CollisionType;\r\n\r\n    /**\r\n     * an event handler that will fire if another entity collided with this instance\r\n     */\r\n    public abstract onCollision(otherEntity: SharedCollidableEntity): void;\r\n\r\n    /**\r\n     * get the width of the entity\r\n     */\r\n    public getWidth(): number {\r\n\r\n        return this.entityWidth;\r\n    }\r\n\r\n    /**\r\n     * get the height of the entity\r\n     */\r\n    public getHeight(): number {\r\n\r\n        return this.entityHeight;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/client/entity/CollidableEntity.ts"],"sourceRoot":""}